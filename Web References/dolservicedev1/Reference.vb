'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace dolservicedev1
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DOLWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class DOLWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CallMMVUOUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallMVBWSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallMVBNCIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://dolservicedev/DOLWebService.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CallMMVUOUCompleted As CallMMVUOUCompletedEventHandler
        
        '''<remarks/>
        Public Event CallMVBWSPCompleted As CallMVBWSPCompletedEventHandler
        
        '''<remarks/>
        Public Event CallMVBNCICompleted As CallMVBNCICompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Call-MMVUOU", RequestElementName:="Call-MMVUOU", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Call-MMVUOUResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallMMVUOU(<System.Xml.Serialization.XmlElementAttribute("INPUT-VAL")> ByVal INPUTVAL As String) As <System.Xml.Serialization.XmlElementAttribute("Call-MMVUOUResult")> String
            Dim results() As Object = Me.Invoke("CallMMVUOU", New Object() {INPUTVAL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCallMMVUOU(ByVal INPUTVAL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CallMMVUOU", New Object() {INPUTVAL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCallMMVUOU(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallMMVUOUAsync(ByVal INPUTVAL As String)
            Me.CallMMVUOUAsync(INPUTVAL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallMMVUOUAsync(ByVal INPUTVAL As String, ByVal userState As Object)
            If (Me.CallMMVUOUOperationCompleted Is Nothing) Then
                Me.CallMMVUOUOperationCompleted = AddressOf Me.OnCallMMVUOUOperationCompleted
            End If
            Me.InvokeAsync("CallMMVUOU", New Object() {INPUTVAL}, Me.CallMMVUOUOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallMMVUOUOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallMMVUOUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallMMVUOUCompleted(Me, New CallMMVUOUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Call-MVBWSP", RequestElementName:="Call-MVBWSP", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Call-MVBWSPResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallMVBWSP(<System.Xml.Serialization.XmlElementAttribute("INPUT-VAL")> ByVal INPUTVAL As String) As <System.Xml.Serialization.XmlElementAttribute("Call-MVBWSPResult")> String
            Dim results() As Object = Me.Invoke("CallMVBWSP", New Object() {INPUTVAL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCallMVBWSP(ByVal INPUTVAL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CallMVBWSP", New Object() {INPUTVAL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCallMVBWSP(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallMVBWSPAsync(ByVal INPUTVAL As String)
            Me.CallMVBWSPAsync(INPUTVAL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallMVBWSPAsync(ByVal INPUTVAL As String, ByVal userState As Object)
            If (Me.CallMVBWSPOperationCompleted Is Nothing) Then
                Me.CallMVBWSPOperationCompleted = AddressOf Me.OnCallMVBWSPOperationCompleted
            End If
            Me.InvokeAsync("CallMVBWSP", New Object() {INPUTVAL}, Me.CallMVBWSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallMVBWSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallMVBWSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallMVBWSPCompleted(Me, New CallMVBWSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Call-MVBNCI", RequestElementName:="Call-MVBNCI", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Call-MVBNCIResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallMVBNCI(<System.Xml.Serialization.XmlElementAttribute("INPUT-VAL")> ByVal INPUTVAL As String) As <System.Xml.Serialization.XmlElementAttribute("Call-MVBNCIResult")> String
            Dim results() As Object = Me.Invoke("CallMVBNCI", New Object() {INPUTVAL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCallMVBNCI(ByVal INPUTVAL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CallMVBNCI", New Object() {INPUTVAL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCallMVBNCI(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallMVBNCIAsync(ByVal INPUTVAL As String)
            Me.CallMVBNCIAsync(INPUTVAL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallMVBNCIAsync(ByVal INPUTVAL As String, ByVal userState As Object)
            If (Me.CallMVBNCIOperationCompleted Is Nothing) Then
                Me.CallMVBNCIOperationCompleted = AddressOf Me.OnCallMVBNCIOperationCompleted
            End If
            Me.InvokeAsync("CallMVBNCI", New Object() {INPUTVAL}, Me.CallMVBNCIOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallMVBNCIOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallMVBNCICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallMVBNCICompleted(Me, New CallMVBNCICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub CallMMVUOUCompletedEventHandler(ByVal sender As Object, ByVal e As CallMMVUOUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallMMVUOUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub CallMVBWSPCompletedEventHandler(ByVal sender As Object, ByVal e As CallMVBWSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallMVBWSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub CallMVBNCICompletedEventHandler(ByVal sender As Object, ByVal e As CallMVBNCICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallMVBNCICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
